{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/UserCryptosContainer.js\";\nimport React from 'react';\nimport UserCrypto from '../components/UserCrypto';\n\nclass UserCryptosContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getPrices = () => {\n      const values = [];\n      this.props.userCryptos.map(crypto => {\n        values.push(parseInt(crypto.price));\n      });\n\n      if (values.length >= 1) {\n        let total = values.reduce((x, y) => x + y);\n        return total;\n      }\n\n      let total = 0;\n      return total;\n    };\n\n    this.countCrypto = cc => {\n      const cryptos = [];\n      this.props.userCryptos.map(crypto => {\n        if (cc.name === crypto.name) {\n          cryptos.push(crypto);\n        }\n      });\n      return cryptos.length;\n    };\n\n    this.distinctCrypto = () => {\n      const array = this.props.userCryptos;\n      const result = [];\n      const map = new Map();\n\n      for (const item of array) {\n        if (!map.has(item.id)) {\n          map.set(item.id, true); // set any value to Map\n\n          result.push({\n            id: item.id,\n            name: item.name,\n            image: item.image,\n            highday: item.highday,\n            lowday: item.lowday,\n            market: item.market,\n            price: item.price,\n            supply: item.supply,\n            volume: item.volume\n          });\n        }\n      }\n\n      return result;\n    };\n\n    this.state = {\n      current_user: {},\n      error: \"\",\n      feedback: \"\",\n      userCryptos: [],\n      currentCrypto: {},\n      lookingAtSingleCrypto: false,\n      cryptosAreLoading: false,\n      news: [],\n      currentNewsArticle: {},\n      lookingAtSingleNewsArticle: false\n    };\n    this.createNewUser = this.createNewUser.bind(this);\n    this.attemptLogin = this.attemptLogin.bind(this);\n    this.setActiveUser = this.setActiveUser.bind(this);\n    this.logout = this.logout.bind(this);\n    this.updateUser = this.updateUser.bind(this);\n    this.deleteUser = this.deleteUser.bind(this);\n    this.setError = this.setError.bind(this);\n    this.setFeedback = this.setFeedback.bind(this);\n    this.renewState();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"userCryptos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"ccHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"My Cryptocurrencies\"), React.createElement(\"h1\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Total portfolio value: $\", this.getPrices()), React.createElement(\"button\", {\n      className: \"CCbutton\",\n      onClick: this.props.returnToHomepageFromCryptosContainers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Return to homepage\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.distinctCrypto().map(crypto => {\n      return React.createElement(UserCrypto, {\n        countCrypto: this.countCrypto,\n        key: \"user-\" + crypto.name + \"-\" + crypto.id,\n        crypto: crypto,\n        setCurrentCrypto: this.props.setCurrentCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nexport default UserCryptosContainer;","map":{"version":3,"sources":["/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/UserCryptosContainer.js"],"names":["React","UserCrypto","UserCryptosContainer","Component","constructor","props","getPrices","values","userCryptos","map","crypto","push","parseInt","price","length","total","reduce","x","y","countCrypto","cc","cryptos","name","distinctCrypto","array","result","Map","item","has","id","set","image","highday","lowday","market","supply","volume","state","current_user","error","feedback","currentCrypto","lookingAtSingleCrypto","cryptosAreLoading","news","currentNewsArticle","lookingAtSingleNewsArticle","createNewUser","bind","attemptLogin","setActiveUser","logout","updateUser","deleteUser","setError","setFeedback","renewState","render","returnToHomepageFromCryptosContainers","setCurrentCrypto"],"mappings":"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","sourcesContent":["import React from 'react'\nimport UserCrypto from '../components/UserCrypto'\n\nclass UserCryptosContainer extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      current_user: {},\n      error: \"\",\n      feedback: \"\",\n      userCryptos: [],\n      currentCrypto: {},\n      lookingAtSingleCrypto: false,\n      cryptosAreLoading: false,\n      news: [],\n      currentNewsArticle: {},\n      lookingAtSingleNewsArticle: false\n    }\n\n    this.createNewUser = this.createNewUser.bind(this)\n    this.attemptLogin = this.attemptLogin.bind(this)\n    this.setActiveUser = this.setActiveUser.bind(this)\n    this.logout = this.logout.bind(this)\n    this.updateUser = this.updateUser.bind(this)\n    this.deleteUser = this.deleteUser.bind(this)\n    this.setError = this.setError.bind(this)\n    this.setFeedback = this.setFeedback.bind(this)\n    this.renewState();\n  }\n\ngetPrices = () => {\n  const values = []\n  this.props.userCryptos.map((crypto)=> {\n    values.push(parseInt(crypto.price))\n  })\n  if(values.length >= 1) {\n  let total = values.reduce((x, y) => x + y)\n  return total\n}\n  let total  = 0\n  return total\n}\n\ncountCrypto = (cc) => {\n  const cryptos = []\n  this.props.userCryptos.map((crypto) => {\n    if(cc.name === crypto.name) {\n      cryptos.push(crypto)\n    }\n  })\n  return cryptos.length\n}\n\ndistinctCrypto = () => {\nconst array = this.props.userCryptos\nconst result = [];\nconst map = new Map();\nfor (const item of array) {\n    if(!map.has(item.id)){\n        map.set(item.id, true);    // set any value to Map\n        result.push({\n            id: item.id,\n            name: item.name,\n            image: item.image,\n            highday: item.highday,\n            lowday: item.lowday,\n            market: item.market,\n            price: item.price,\n            supply: item.supply,\n            volume: item.volume\n        });\n    }\n}\nreturn result\n}\n\n  render(){\n    return(\n      <div className=\"userCryptos\">\n      <h1 className=\"ccHeader\">My Cryptocurrencies</h1>\n      <h1 className=\"\">Total portfolio value: ${this.getPrices()}</h1>\n      <button className=\"CCbutton\" onClick={this.props.returnToHomepageFromCryptosContainers}>Return to homepage</button>\n      <div>\n\n      {this.distinctCrypto().map((crypto)=>{\n        return <UserCrypto\n                countCrypto={this.countCrypto}\n                key={\"user-\"+crypto.name+\"-\"+crypto.id}\n                crypto={crypto}\n                setCurrentCrypto={this.props.setCurrentCrypto}\n                />\n      })}\n      </div>\n      </div>\n    )\n  }\n\n}\n\nexport default UserCryptosContainer\n"]},"metadata":{},"sourceType":"module"}