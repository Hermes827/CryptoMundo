{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/module_5_project/cryptoproject_frontend1/src/containers/centerConsole.js\";\nimport React, { Component } from 'react';\nimport CryptosContainer from './cryptosContainer';\nimport CryptoNameForm from '../components/cryptoNameForm';\nimport { Redirect } from 'react-router-dom';\nimport CryptoDetailedView from '../components/CryptoDetailedView';\nconst URL = \"http://localhost:3000/api/v1/searchbyname\";\nconst API = \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD&api_key={2eb0a0afcdbd0af89e90104132e9424984ac9324e5c2b62272a6afbe9567cb19}\";\nconst random = document.getElementsByClassName(\"title\");\nexport default class centerConsole extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCryptosName = event => {\n      this.setLoading();\n      fetch(API).then(res => res.json()).then(data => {\n        // this.setState({\n        //   cryptos: data,\n        //   cryptosAreLoading: false\n        // })\n        console.log(data);\n      });\n    };\n\n    this.setCurrentCrypto = crypto => {\n      this.setState({\n        currentCrypto: crypto,\n        lookingAtSingleCrypto: true\n      });\n    };\n\n    this.returnMainMenu = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false\n      });\n    };\n\n    this.addCrypto = crypto => {\n      fetch(\"http://localhost:3000/api/v1/add_crypto\", {\n        method: 'POST',\n        body: JSON.stringify({\n          crypto_id: crypto.id\n        }),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + localStorage.token\n        }\n      }).then(res => res.json()).then(data => {\n        this.props.setFeedback(\"Added \".concat(crypto.name, \" to portfolio\"));\n      });\n    };\n\n    this.returnToHomepageFromCryptosContainers = () => {\n      console.log(\"hello\");\n      this.setState({\n        cryptosAreLoading: true,\n        currentCrypto: null,\n        lookingAtSingleCrypto: false\n      });\n    };\n\n    this.state = {\n      cryptos: [],\n      lookingAtSingleCrypto: false,\n      currentCrypto: {},\n      cryptosAreLoading: false\n    };\n  }\n\n  setLoading() {\n    this.setState({\n      CryptosAreLoading: true\n    });\n  }\n\n  renderCryptos() {\n    if (this.state.cryptos.length === 0 && !this.state.cryptosAreLoading) {\n      return null;\n    } else if (!this.state.cryptosAreLoading) {\n      return React.createElement(\"div\", {\n        className: \"cryptosContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"View Cryptos\"), React.createElement(CryptosContainer, {\n        cryptos: this.state.cryptos,\n        setCurrentCrypto: this.setCurrentCrypto,\n        returnToHomepageFromCryptosContainers: this.returnToHomepageFromCryptosContainers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }));\n    }\n  }\n\n  renderDetailedUserCryptoView() {\n    const currentCrypto = this.state.currentCrypto;\n\n    if (this.state.lookingAtSingleCrypto === true) {\n      return React.createElement(CryptoDetailedView, {\n        feedback: this.props.feedback,\n        currentCrypto: currentCrypto,\n        returnMainMenu: this.returnMainMenu,\n        addCrypto: this.addCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    if (!localStorage.token) {\n      return React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, this.renderCryptos(), React.createElement(\"div\", {\n      className: \"forms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Crypto Mundo\"), React.createElement(CryptoNameForm, {\n      getCryptosName: this.getCryptosName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), this.renderDetailedUserCryptoView());\n  }\n\n}","map":{"version":3,"sources":["/Users/chriscable/Desktop/module_5_project/cryptoproject_frontend1/src/containers/centerConsole.js"],"names":["React","Component","CryptosContainer","CryptoNameForm","Redirect","CryptoDetailedView","URL","API","random","document","getElementsByClassName","centerConsole","constructor","props","getCryptosName","event","setLoading","fetch","then","res","json","data","console","log","setCurrentCrypto","crypto","setState","currentCrypto","lookingAtSingleCrypto","returnMainMenu","addCrypto","method","body","JSON","stringify","crypto_id","id","headers","localStorage","token","setFeedback","name","returnToHomepageFromCryptosContainers","cryptosAreLoading","state","cryptos","CryptosAreLoading","renderCryptos","length","renderDetailedUserCryptoView","feedback","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport CryptosContainer from './cryptosContainer'\nimport CryptoNameForm from '../components/cryptoNameForm'\nimport {Redirect} from 'react-router-dom'\nimport CryptoDetailedView from '../components/CryptoDetailedView'\n\nconst URL = \"http://localhost:3000/api/v1/searchbyname\"\nconst API = \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD&api_key={2eb0a0afcdbd0af89e90104132e9424984ac9324e5c2b62272a6afbe9567cb19}\"\nconst random = document.getElementsByClassName(\"title\")\n\n\nexport default class centerConsole extends Component {\n\n\n\n  constructor(props){\n    super(props)\n      this.state = {\n        cryptos: [],\n        lookingAtSingleCrypto: false,\n        currentCrypto: {},\n        cryptosAreLoading: false\n      }\n    }\n\n  getCryptosName = (event) => {\n    this.setLoading()\n    fetch(API)\n      .then(res => res.json())\n      .then(data => {\n        // this.setState({\n        //   cryptos: data,\n        //   cryptosAreLoading: false\n        // })\n        console.log(data)\n      })\n\n  }\n\n\n  setCurrentCrypto = (crypto) => {\n    this.setState({\n      currentCrypto: crypto,\n      lookingAtSingleCrypto: true\n    })\n\n  }\n\n  setLoading(){\n    this.setState({CryptosAreLoading: true})\n  }\n\n  returnMainMenu = () => {\n\n    this.setState({\n      currentCrypto: null,\n      lookingAtSingleCrypto: false\n    })\n  }\n\n\n  addCrypto = (crypto) => {\n    fetch(\"http://localhost:3000/api/v1/add_crypto\", {\n      method: 'POST',\n      body: JSON.stringify({crypto_id: crypto.id}),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.token\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.props.setFeedback(`Added ${crypto.name} to portfolio`)\n    })\n  }\n\n\n\n\nreturnHome = () => {\n  console.log(\"hello\")\n  this.setState({\n    cryptosAreLoading: true,\n    currentCrypto: null,\n    lookingAtSingleCrypto: false\n  })\n}\n\n\n\n  renderCryptos() {\n    if(this.state.cryptos.length === 0 && !this.state.cryptosAreLoading){\n      return null\n    } else if (!this.state.cryptosAreLoading){\n      return  <div className=\"cryptosContainer\">\n        <h2 className=\"card-title\">View Cryptos</h2>\n        <CryptosContainer\n          cryptos={this.state.cryptos}\n          setCurrentCrypto={this.setCurrentCrypto}\n          returnToHomepageFromCryptosContainers={this.returnToHomepageFromCryptosContainers}\n          />\n      </div>\n    }\n  }\n\n\n  renderDetailedUserCryptoView(){\n    const {currentCrypto} = this.state\n    if(this.state.lookingAtSingleCrypto === true) {\n      return <CryptoDetailedView\n              feedback={this.props.feedback}\n              currentCrypto={currentCrypto}\n              returnMainMenu={this.returnMainMenu}\n              addCrypto={this.addCrypto}\n              />\n    }\n  }\n\n\n  render(){\n    if(!localStorage.token){\n      return <Redirect to=\"/login\" />\n    }\n\n    return (\n\n        <div className=\"App\">\n            {this.renderCryptos()}\n\n          <div className=\"forms\">\n            <h1 className=\"title\">Crypto Mundo</h1>\n            <CryptoNameForm getCryptosName={this.getCryptosName}/>\n\n          <br/>\n          </div>\n          {this.renderDetailedUserCryptoView()}\n        </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}