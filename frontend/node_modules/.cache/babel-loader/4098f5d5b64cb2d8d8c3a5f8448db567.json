{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Login from './components/login';\nimport Dashboard from './components/Dashboard';\nimport NewUserForm from './components/NewUserForm';\nimport { Route } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport CenterConsole from './containers/centerConsole';\nimport EditUserContainer from './containers/EditUserContainer';\nimport UserCryptosContainer from './containers/UserCryptosContainer';\nimport NewsContainer from './containers/newsContainer';\nimport { USER_URL } from './constants';\nimport { LOGIN_URL } from './constants';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current_user: {},\n      error: \"\"\n    };\n    this.createNewUser = this.createNewUser.bind(this);\n    this.attemptLogin = this.attemptLogin.bind(this);\n    this.setActiveUser = this.setActiveUser.bind(this);\n    this.logout = this.logout.bind(this);\n    this.updateUser = this.updateUser.bind(this);\n    this.deleteUser = this.deleteUser.bind(this); // this.renewState();\n  } // user stuff\n  //   renewState(){\n  //   if(!localStorage.token){return}\n  //   fetch(\"http://localhost:3000/api/v1/profile\", {\n  //     method: \"GET\",\n  //     headers: {\n  //       'Authorization': \"Bearer \" + localStorage.token\n  //     }\n  //   })\n  //   .then(res => res.json())\n  //   .then(data => this.setActiveUser(data, \"soft\"))\n  // }\n\n\n  setActiveUser(data, mode = \"hard\") {\n    // if(data.message && mode === \"soft\"){\n    //   return\n    // } else if(data.message){\n    //   this.setState({error: data.message})\n    // } else {\n    this.setState({\n      current_user: data.user,\n      error: \"\"\n    });\n\n    if (data.jwt) {\n      localStorage.token = data.jwt;\n    }\n  }\n\n  createNewUser(user) {\n    fetch(USER_URL, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(res => res.json()).then(data => {\n      this.setActiveUser(data);\n      this.props.history.push('/center_console');\n      console.log(data.jwt);\n    });\n  }\n\n  updateUser(user) {\n    fetch(USER_URL + \"/\".concat(user.id), {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + localStorage.token,\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(res => res.json()).then(data => {\n      this.setActiveUser(data);\n      this.props.history.push('/center_console');\n    });\n  }\n\n  deleteUser(user) {\n    fetch(USER_URL + \"/\".concat(user.id), {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token\n      }\n    }).then(() => this.logout());\n  } // login\n\n\n  attemptLogin(user) {\n    fetch(LOGIN_URL, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(res => res.json()).then(data => {\n      this.setActiveUser(data);\n\n      if (!data.message) {\n        this.props.history.push('/center_console');\n      }\n    });\n  }\n\n  logout() {\n    this.setState({\n      current_user: {},\n      currentCrypto: {}\n    });\n    delete localStorage.token;\n    this.props.history.push('/login');\n  }\n\n  renderDefaultForm() {\n    if (this.props.history.location.pathname === \"/\") {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dashboard-centerConsole-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Crypto Mundo\"), React.createElement(\"button\", {\n        className: \"crypto-button\",\n        onClick: () => this.props.history.push('/user_signup'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Get Started!\")));\n    }\n  }\n\n  userIsLoggedIn() {\n    return this.current_user.username;\n  }\n\n  renderCenterConsole() {\n    if (this.props.history.location.pathname === \"/center_console\" && this.state.current_user.username) {\n      return React.createElement(CenterConsole, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      });\n    }\n  } /////////////////////////////////////////////////////////////////////////////////\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/\",\n      render: () => React.createElement(Dashboard, {\n        current_user: this.state.current_user,\n        logout: this.logout,\n        displayUserCryptos: this.displayUserCryptos,\n        getNews: this.getNews,\n        setEdit: this.setEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/news\",\n      render: () => React.createElement(NewsContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      render: () => React.createElement(Login, {\n        attemptLogin: this.attemptLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/user_signup\",\n      render: () => React.createElement(NewUserForm, {\n        createNewUser: this.createNewUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/my_crypto\",\n      render: () => React.createElement(UserCryptosContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/update_profile\",\n      render: () => React.createElement(EditUserContainer, {\n        current_user: this.state.current_user,\n        updateUser: this.updateUser,\n        deleteUser: this.deleteUser,\n        setEdit: this.setEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), this.renderDefaultForm(), this.renderCenterConsole());\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/App.js"],"names":["React","Login","Dashboard","NewUserForm","Route","withRouter","CenterConsole","EditUserContainer","UserCryptosContainer","NewsContainer","USER_URL","LOGIN_URL","App","Component","constructor","props","state","current_user","error","createNewUser","bind","attemptLogin","setActiveUser","logout","updateUser","deleteUser","data","mode","setState","user","jwt","localStorage","token","fetch","method","headers","body","JSON","stringify","then","res","json","history","push","console","log","id","message","currentCrypto","renderDefaultForm","location","pathname","userIsLoggedIn","username","renderCenterConsole","render","displayUserCryptos","getNews","setEdit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Login from './components/login';\nimport Dashboard from './components/Dashboard'\nimport NewUserForm from './components/NewUserForm'\nimport { Route } from 'react-router-dom';\nimport {withRouter} from 'react-router';\nimport CenterConsole from './containers/centerConsole'\nimport EditUserContainer from './containers/EditUserContainer'\nimport UserCryptosContainer from './containers/UserCryptosContainer'\nimport NewsContainer from './containers/newsContainer'\nimport {USER_URL} from './constants'\nimport {LOGIN_URL} from './constants'\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      current_user: {},\n      error: \"\"\n    }\n\n    this.createNewUser = this.createNewUser.bind(this)\n    this.attemptLogin = this.attemptLogin.bind(this)\n    this.setActiveUser = this.setActiveUser.bind(this)\n    this.logout = this.logout.bind(this)\n    this.updateUser = this.updateUser.bind(this)\n    this.deleteUser = this.deleteUser.bind(this)\n    // this.renewState();\n  }\n\n  // user stuff\n\n//   renewState(){\n//   if(!localStorage.token){return}\n//   fetch(\"http://localhost:3000/api/v1/profile\", {\n//     method: \"GET\",\n//     headers: {\n//       'Authorization': \"Bearer \" + localStorage.token\n//     }\n//   })\n//   .then(res => res.json())\n//   .then(data => this.setActiveUser(data, \"soft\"))\n// }\n\n  setActiveUser(data, mode=\"hard\"){\n    // if(data.message && mode === \"soft\"){\n    //   return\n    // } else if(data.message){\n    //   this.setState({error: data.message})\n    // } else {\n      this.setState({\n        current_user: data.user,\n        error: \"\"\n      })\n      if(data.jwt){localStorage.token = data.jwt}\n    }\n\n\n  createNewUser(user){\n    fetch(USER_URL, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({user})\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setActiveUser(data)\n      this.props.history.push('/center_console')\n      console.log(data.jwt)\n    })\n  }\n\n\n  updateUser(user){\n    fetch(USER_URL + `/${user.id}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + localStorage.token,\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({user})\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setActiveUser(data)\n      this.props.history.push('/center_console')\n    })\n  }\n\n  deleteUser(user){\n    fetch(USER_URL + `/${user.id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token\n      }\n    })\n    .then(() => this.logout())\n  }\n\n  // login\n\n  attemptLogin(user){\n    fetch(LOGIN_URL, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({user})\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setActiveUser(data)\n      if(!data.message){\n        this.props.history.push('/center_console')\n      }\n    })\n  }\n\n  logout(){\n    this.setState({\n      current_user: {},\n      currentCrypto: {}\n    })\n    delete localStorage.token\n    this.props.history.push('/login')\n  }\n\n  renderDefaultForm(){\n    if(this.props.history.location.pathname === \"/\"){\n      return (\n        <div>\n          <div className=\"dashboard-centerConsole-form\">\n          <h1 className=\"title\">Crypto Mundo</h1>\n          <button className=\"crypto-button\" onClick={()=> this.props.history.push('/user_signup')}>Get Started!</button>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  userIsLoggedIn(){\n    return this.current_user.username\n  }\n\n  renderCenterConsole(){\n    if(this.props.history.location.pathname === \"/center_console\" && this.state.current_user.username){\n      return <CenterConsole/>\n    }\n  }\n\n/////////////////////////////////////////////////////////////////////////////////\n\n  render(){\n\n    return (\n      <div className=\"App\">\n        <Route path='/' render={() => <Dashboard\n                                      current_user={this.state.current_user}\n                                      logout={this.logout}\n                                      displayUserCryptos={this.displayUserCryptos}\n                                      getNews={this.getNews}\n                                      setEdit={this.setEdit}\n                                      />}/>\n\n          <Route exact path=\"/news\" render={() => <NewsContainer/>}/>\n\n          <Route exact path=\"/login\" render={() => <Login attemptLogin={this.attemptLogin}/>}/>\n\n          <Route exact path=\"/user_signup\" render={() => <NewUserForm createNewUser={this.createNewUser}/>}/>\n\n          <Route exact path='/my_crypto' render={() => <UserCryptosContainer/>}/>\n\n\n          <Route exact path=\"/update_profile\" render={() => <EditUserContainer\n                                                            current_user={this.state.current_user}\n                                                            updateUser={this.updateUser}\n                                                            deleteUser={this.deleteUser}\n                                                            setEdit={this.setEdit}\n                                                            />}/>\n         {this.renderDefaultForm()}\n         {this.renderCenterConsole()}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}