{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/cryptosContainer.js\";\nimport React from 'react';\nimport Crypto from '../components/crypto';\nimport CryptoDetailedView from '../components/CryptoDetailedView'; // const API = \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD&api_key={2eb0a0afcdbd0af89e90104132e9424984ac9324e5c2b62272a6afbe9567cb19}\"\n\nclass CryptosContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCryptos = () => {\n      fetch(\"http://localhost:3000/api/v1/searchbyname\").then(res => res.json()).then(data => {\n        this.setState({\n          cryptos: data\n        });\n        console.log(data);\n      });\n    };\n\n    this.setCurrentCrypto = crypto => {\n      this.setState({\n        currentCrypto: crypto,\n        lookingAtSingleCrypto: true\n      });\n    };\n\n    this.returnToCryptosContainer = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false\n      });\n    };\n\n    this.addCrypto = crypto => {\n      fetch(\"http://localhost:3000/api/v1/add_crypto\", {\n        method: 'POST',\n        body: JSON.stringify({\n          crypto_id: crypto.id\n        }),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + localStorage.token\n        }\n      }).then(res => res.json()).then(data => {\n        this.setFeedback(\"Added \".concat(crypto.name, \" to portfolio\"));\n      });\n    };\n\n    this.state = {\n      cryptos: [],\n      lookingAtSingleCrypto: false,\n      hasClickedButton: false,\n      currentCrypto: {},\n      feedback: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/api/v1/searchbyname\").then(res => res.json()).then(data => {\n      this.setState({\n        cryptos: data\n      });\n    });\n  }\n\n  setFeedback(str) {\n    this.setState({\n      feedback: str\n    });\n    setTimeout(() => this.setState({\n      feedback: \"\"\n    }), 1500);\n  }\n\n  renderDetailedUserCryptoView() {\n    const _this$state = this.state,\n          currentCrypto = _this$state.currentCrypto,\n          lookingAtSingleCrypto = _this$state.lookingAtSingleCrypto;\n\n    if (lookingAtSingleCrypto === true) {\n      return React.createElement(CryptoDetailedView, {\n        feedback: this.state.feedback,\n        currentCrypto: currentCrypto,\n        returnToCryptosContainer: this.returnToCryptosContainer,\n        addCrypto: this.addCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      });\n    }\n  }\n\n  // returnToHomepageFromCryptosContainers = () => {\n  //   this.setState({\n  //     currentCrypto: null,\n  //     lookingAtSingleCrypto: false,\n  //     hasClickedButton: false\n  //   })\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      className: \"cryptoItem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"ccHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"All Cryptocurrencies\"), React.createElement(\"button\", {\n      className: \"CCbutton\",\n      onClick: this.props.returnToHomepageFromCryptosContainers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Return to homepage\"), this.renderDetailedUserCryptoView(), this.state.cryptos.map(crypto => {\n      return React.createElement(Crypto, {\n        className: \"cryptoElement\",\n        key: \"display-\" + crypto.name + \"-\" + crypto.id,\n        crypto: crypto,\n        setCurrentCrypto: this.setCurrentCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nexport default CryptosContainer;","map":{"version":3,"sources":["/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/cryptosContainer.js"],"names":["React","Crypto","CryptoDetailedView","CryptosContainer","Component","constructor","props","getCryptos","fetch","then","res","json","data","setState","cryptos","console","log","setCurrentCrypto","crypto","currentCrypto","lookingAtSingleCrypto","returnToCryptosContainer","addCrypto","method","body","JSON","stringify","crypto_id","id","headers","localStorage","token","setFeedback","name","state","hasClickedButton","feedback","componentDidMount","str","setTimeout","renderDetailedUserCryptoView","render","returnToHomepageFromCryptosContainers","map"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Crypto from '../components/crypto'\nimport CryptoDetailedView from '../components/CryptoDetailedView'\n\n// const API = \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD&api_key={2eb0a0afcdbd0af89e90104132e9424984ac9324e5c2b62272a6afbe9567cb19}\"\n\nclass CryptosContainer extends React.Component {\n\n  constructor(props){\n    super(props)\n      this.state = {\n        cryptos: [],\n        lookingAtSingleCrypto: false,\n        hasClickedButton: false,\n        currentCrypto: {},\n        feedback: \"\"\n      }\n    }\n\n  componentDidMount(){\n    fetch(\"http://localhost:3000/api/v1/searchbyname\")\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          cryptos: data\n          })\n      })\n  }\n\n  getCryptos = () => {\n  fetch(\"http://localhost:3000/api/v1/searchbyname\")\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        cryptos: data\n        })\n        console.log(data)\n    })\n  }\n\n  setFeedback(str){\n    this.setState({\n      feedback: str\n    })\n    setTimeout(() => this.setState({feedback: \"\"}), 1500)\n  }\n\n  setCurrentCrypto = (crypto) => {\n    this.setState({\n      currentCrypto: crypto,\n      lookingAtSingleCrypto: true\n    })\n  }\n\n  renderDetailedUserCryptoView(){\n    const {currentCrypto, lookingAtSingleCrypto} = this.state\n    if(lookingAtSingleCrypto === true) {\n      return <CryptoDetailedView\n              feedback={this.state.feedback}\n              currentCrypto={currentCrypto}\n              returnToCryptosContainer={this.returnToCryptosContainer}\n              addCrypto={this.addCrypto}\n              />\n    }\n  }\n\n  returnToCryptosContainer = () => {\n    this.setState({\n      currentCrypto: null,\n      lookingAtSingleCrypto: false\n    })\n  }\n\n  addCrypto = (crypto) => {\n    fetch(\"http://localhost:3000/api/v1/add_crypto\", {\n      method: 'POST',\n      body: JSON.stringify({crypto_id: crypto.id}),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.token\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setFeedback(`Added ${crypto.name} to portfolio`)\n    })\n  }\n\n// returnToHomepageFromCryptosContainers = () => {\n//   this.setState({\n//     currentCrypto: null,\n//     lookingAtSingleCrypto: false,\n//     hasClickedButton: false\n//   })\n// }\n\n  render(){\n    return(\n      <div className=\"cryptoItem\">\n        <h1 className=\"ccHeader\">All Cryptocurrencies</h1>\n        <button className=\"CCbutton\" onClick={this.props.returnToHomepageFromCryptosContainers}>Return to homepage</button>\n            {this.renderDetailedUserCryptoView()}\n        {\n        this.state.cryptos.map((crypto)=>{\n          return <Crypto\n                  className=\"cryptoElement\"\n                  key={\"display-\"+crypto.name+\"-\"+crypto.id}\n                  crypto={crypto}\n                  setCurrentCrypto={this.setCurrentCrypto}\n                  />\n\n        })\n      }\n    </div>\n    )\n  }\n\n}\n\nexport default CryptosContainer\n"]},"metadata":{},"sourceType":"module"}