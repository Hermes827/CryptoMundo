{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/UserCryptosContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport UserCrypto from '../components/UserCrypto';\nimport UserCryptoDetailedView from '../components/UserCryptoDetailedView';\n\nclass UserCryptosContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setCurrentCrypto = crypto => {\n      this.setState({\n        currentCrypto: crypto,\n        lookingAtSingleCrypto: true\n      }); // console.log(\"hello\")\n      // this.props.history.push('/my_crypto/' + crypto.id)\n    };\n\n    this.returnToUserCryptosContainer = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false\n      });\n    };\n\n    this.returnToHomepageFromCryptosContainers = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false\n      });\n      this.props.history.push('/center_console');\n    };\n\n    this.deleteCrypto = crypto => {\n      fetch(\"http://localhost:3000/api/v1/remove_crypto/\" + crypto.id, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': \"Bearer \" + localStorage.token\n        },\n        body: JSON.stringify({\n          crypto_id: crypto.id\n        })\n      }).then(res => res.json()).then(data => {\n        let cryptoNames = data.user.cryptos.map(crypto => {\n          return crypto.name;\n        });\n\n        if (!cryptoNames.includes(crypto.name)) {\n          setTimeout(() => this.setState({\n            currentCrypto: null,\n            lookingAtSingleCrypto: false\n          }), 2000);\n        }\n\n        this.setError(\"Deleted ${crypto.name} from Cryptos\");\n        this.componentDidMount();\n      });\n    };\n\n    this.getPrices = () => {\n      const values = [];\n      this.state.userCryptos.map(crypto => {\n        values.push(parseInt(crypto.price));\n      });\n\n      if (values.length >= 1) {\n        let total = values.reduce((x, y) => x + y);\n        return total;\n      }\n\n      let total = 0;\n      return total;\n    };\n\n    this.countCrypto = cc => {\n      const cryptos = [];\n      this.state.userCryptos.map(crypto => {\n        if (cc.name === crypto.name) {\n          cryptos.push(crypto);\n        }\n      });\n      return cryptos.length;\n    };\n\n    this.distinctCrypto = () => {\n      const array = this.state.userCryptos;\n      const result = [];\n      const map = new Map();\n\n      for (const item of array) {\n        if (!map.has(item.id)) {\n          map.set(item.id, true); // set any value to Map\n\n          result.push({\n            id: item.id,\n            name: item.name,\n            image: item.image,\n            highday: item.highday,\n            lowday: item.lowday,\n            market: item.market,\n            price: item.price,\n            supply: item.supply,\n            volume: item.volume\n          });\n        }\n      }\n\n      return result;\n    };\n\n    this.state = {\n      error: \"\",\n      userCryptos: [],\n      currentCrypto: {},\n      lookingAtSingleCrypto: false\n    };\n  }\n\n  setError(str) {\n    this.setState({\n      error: str\n    });\n    setTimeout(() => this.setState({\n      error: \"\"\n    }), 1500);\n  }\n\n  componentDidMount() {\n    if (!localStorage.token) {\n      return;\n    }\n\n    fetch(\"http://localhost:3000/api/v1/profile\", {\n      method: \"GET\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        userCryptos: data.user.cryptos // cryptosAreLoading: false\n\n      });\n    });\n  }\n\n  renderDetailedUserCryptoView() {\n    const _this$state = this.state,\n          currentCrypto = _this$state.currentCrypto,\n          lookingAtSingleCrypto = _this$state.lookingAtSingleCrypto;\n\n    if (lookingAtSingleCrypto === true) {\n      console.log(\"hello\");\n      console.log(currentCrypto);\n      console.log(lookingAtSingleCrypto);\n      return React.createElement(UserCryptoDetailedView, {\n        countCrypto: this.countCrypto,\n        currentCrypto: currentCrypto,\n        returnToUserCryptosContainer: this.returnToUserCryptosContainer,\n        deleteCrypto: this.deleteCrypto,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"userCryptosContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"ccHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"My Cryptocurrencies\"), React.createElement(\"h1\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Total portfolio value: $\", this.getPrices()), React.createElement(\"button\", {\n      className: \"CCbutton\",\n      onClick: this.returnToHomepageFromCryptosContainers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Return to homepage\"), this.distinctCrypto().map(crypto => {\n      return React.createElement(UserCrypto, {\n        countCrypto: this.countCrypto,\n        key: \"user-\" + crypto.name + \"-\" + crypto.id,\n        crypto: crypto,\n        setCurrentCrypto: this.setCurrentCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      });\n    }), this.renderDetailedUserCryptoView());\n  }\n\n}\n\nexport default withRouter(UserCryptosContainer);","map":{"version":3,"sources":["/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/UserCryptosContainer.js"],"names":["React","withRouter","UserCrypto","UserCryptoDetailedView","UserCryptosContainer","Component","constructor","props","setCurrentCrypto","crypto","setState","currentCrypto","lookingAtSingleCrypto","returnToUserCryptosContainer","returnToHomepageFromCryptosContainers","history","push","deleteCrypto","fetch","id","method","headers","localStorage","token","body","JSON","stringify","crypto_id","then","res","json","data","cryptoNames","user","cryptos","map","name","includes","setTimeout","setError","componentDidMount","getPrices","values","state","userCryptos","parseInt","price","length","total","reduce","x","y","countCrypto","cc","distinctCrypto","array","result","Map","item","has","set","image","highday","lowday","market","supply","volume","error","str","renderDetailedUserCryptoView","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {withRouter} from 'react-router';\nimport UserCrypto from '../components/UserCrypto'\nimport UserCryptoDetailedView from '../components/UserCryptoDetailedView'\n\nclass UserCryptosContainer extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      error: \"\",\n      userCryptos: [],\n      currentCrypto: {},\n      lookingAtSingleCrypto: false\n    }\n  }\n\n  setError(str){\n    this.setState({\n      error: str\n    })\n    setTimeout(() => this.setState({error: \"\"}), 1500)\n  }\n\n  componentDidMount(){\n    if(!localStorage.token){return}\n    fetch(\"http://localhost:3000/api/v1/profile\", {\n      method: \"GET\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token,\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        userCryptos: data.user.cryptos\n        // cryptosAreLoading: false\n      })\n    })\n  }\n\n  setCurrentCrypto = (crypto) => {\n    this.setState({\n      currentCrypto: crypto,\n      lookingAtSingleCrypto: true\n    })\n    // console.log(\"hello\")\n    // this.props.history.push('/my_crypto/' + crypto.id)\n  }\n\n  renderDetailedUserCryptoView(){\n    const {currentCrypto, lookingAtSingleCrypto} = this.state\n    if(lookingAtSingleCrypto === true) {\n      console.log(\"hello\")\n      console.log(currentCrypto)\n      console.log(lookingAtSingleCrypto)\n      return (\n\n        <UserCryptoDetailedView\n        countCrypto={this.countCrypto}\n        currentCrypto={currentCrypto}\n        returnToUserCryptosContainer={this.returnToUserCryptosContainer}\n        deleteCrypto={this.deleteCrypto}\n        error={this.state.error}\n        />\n\n          )\n    }\n  }\n\n\n  returnToUserCryptosContainer = () => {\n    this.setState({\n      currentCrypto: null,\n      lookingAtSingleCrypto: false,\n    })\n  }\n\n  returnToHomepageFromCryptosContainers = () => {\n    this.setState({\n      currentCrypto: null,\n      lookingAtSingleCrypto: false\n    })\n    this.props.history.push('/center_console')\n  }\n\n\n  deleteCrypto = (crypto) => {\n    fetch(\"http://localhost:3000/api/v1/remove_crypto/\"+ crypto.id, {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token\n      },\n      body: JSON.stringify({crypto_id: crypto.id})\n    })\n    .then(res => res.json())\n    .then(data => {\n      let cryptoNames = data.user.cryptos.map((crypto) => {\n        return crypto.name\n      })\n      if(!cryptoNames.includes(crypto.name)){\n        setTimeout(() => this.setState({\n          currentCrypto: null,\n          lookingAtSingleCrypto: false,\n        }), 2000)\n      }\n      this.setError(\"Deleted ${crypto.name} from Cryptos\")\n      this.componentDidMount()\n    })\n  }\n\ngetPrices = () => {\n  const values = []\n  this.state.userCryptos.map((crypto)=> {\n    values.push(parseInt(crypto.price))\n  })\n  if(values.length >= 1) {\n  let total = values.reduce((x, y) => x + y)\n  return total\n}\n  let total  = 0\n  return total\n}\n\ncountCrypto = (cc) => {\n  const cryptos = []\n  this.state.userCryptos.map((crypto) => {\n    if(cc.name === crypto.name) {\n      cryptos.push(crypto)\n    }\n  })\n  return cryptos.length\n}\n\ndistinctCrypto = () => {\nconst array = this.state.userCryptos\nconst result = [];\nconst map = new Map();\nfor (const item of array) {\n    if(!map.has(item.id)){\n        map.set(item.id, true);    // set any value to Map\n        result.push({\n            id: item.id,\n            name: item.name,\n            image: item.image,\n            highday: item.highday,\n            lowday: item.lowday,\n            market: item.market,\n            price: item.price,\n            supply: item.supply,\n            volume: item.volume\n        });\n    }\n}\nreturn result\n}\n\n  render(){\n    return(\n      <div className=\"userCryptosContainer\">\n      <h1 className=\"ccHeader\">My Cryptocurrencies</h1>\n      <h1 className=\"\">Total portfolio value: ${this.getPrices()}</h1>\n      <button className=\"CCbutton\" onClick={this.returnToHomepageFromCryptosContainers}>Return to homepage</button>\n\n      {this.distinctCrypto().map((crypto)=>{\n        return <UserCrypto\n                countCrypto={this.countCrypto}\n                key={\"user-\"+crypto.name+\"-\"+crypto.id}\n                crypto={crypto}\n                setCurrentCrypto={this.setCurrentCrypto}\n                />\n      })}\n\n      {this.renderDetailedUserCryptoView()}\n      </div>\n    )\n  }\n\n}\n\nexport default withRouter(UserCryptosContainer)\n"]},"metadata":{},"sourceType":"module"}