{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/mod5project/cryptoproject_frontend1/src/containers/Dashboard.js\";\nimport React, { Component } from 'react';\nimport CryptosContainer from './cryptosContainer';\nimport CryptoNameForm from '../components/cryptoNameForm';\nimport { Redirect } from 'react-router-dom';\nimport DetailedView from '../components/detailedView';\nconst URL = \"http://localhost:3000/api/v1/searchbyname\";\nexport default class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCryptosName = () => {\n      this.setLoading();\n      fetch(URL).then(res => res.json()).then(data => {\n        this.setState({\n          cryptos: data,\n          cryptosAreLoading: false\n        });\n      });\n    };\n\n    this.setCurrentCrypto = crypto => {\n      this.setState({\n        currentCrypto: crypto,\n        lookingAtSingleCrypto: true\n      });\n    };\n\n    this.returnMainMenu = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false\n      });\n    };\n\n    this.addCrypto = crypto => {\n      fetch(\"http://localhost:3000/api/v1/add_crypto\", {\n        method: 'POST',\n        body: JSON.stringify({\n          crypto_id: crypto.id\n        }),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + localStorage.token\n        }\n      }).then(res => res.json()).then(data => {\n        this.props.setFeedback(\"Added \".concat(crypto.name, \" to \\\"My Cryptos\\\"\"));\n      });\n      console.log(crypto);\n    };\n\n    this.renderDetailedUserCryptoView = () => {\n      const currentCrypto = this.state.currentCrypto;\n\n      if (this.state.lookingAtSingleCrypto === true) {\n        return React.createElement(DetailedView, {\n          currentCrypto: currentCrypto,\n          returnMainMenu: this.returnMainMenu,\n          addCrypto: this.addCrypto,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, this.renderCryptos(), React.createElement(\"h1\", {\n          className: \"title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, \"My Crypto\"), React.createElement(\"div\", {\n          className: \"forms\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(CryptoNameForm, {\n          getCryptosName: this.getCryptosName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        })));\n      }\n    };\n\n    this.state = {\n      cryptos: [],\n      lookingAtSingleCrypto: false,\n      currentCrypto: {},\n      cryptosAreLoading: false\n    };\n  }\n\n  setLoading() {\n    this.setState({\n      CryptosAreLoading: true\n    });\n  }\n\n  renderCryptos() {\n    if (this.state.cryptos.length === 0 && !this.state.cryptosAreLoading) {\n      return null;\n    } else if (!this.state.cryptosAreLoading) {\n      return React.createElement(\"div\", {\n        className: \"cryptosContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Found Cryptos\"), React.createElement(CryptosContainer, {\n        cryptos: this.state.cryptos,\n        setCurrentCrypto: this.setCurrentCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"cryptosContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"loading-dimmer ui segment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui active dimmer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui text loader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Finding Cryptos...\"))));\n    }\n  }\n\n  render() {\n    if (!localStorage.token) {\n      return React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.renderDetailedUserCryptoView());\n  }\n\n}","map":{"version":3,"sources":["/Users/chriscable/Desktop/mod5project/cryptoproject_frontend1/src/containers/Dashboard.js"],"names":["React","Component","CryptosContainer","CryptoNameForm","Redirect","DetailedView","URL","Dashboard","constructor","props","getCryptosName","setLoading","fetch","then","res","json","data","setState","cryptos","cryptosAreLoading","setCurrentCrypto","crypto","currentCrypto","lookingAtSingleCrypto","returnMainMenu","addCrypto","method","body","JSON","stringify","crypto_id","id","headers","localStorage","token","setFeedback","name","console","log","renderDetailedUserCryptoView","state","renderCryptos","CryptosAreLoading","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport CryptosContainer from './cryptosContainer'\nimport CryptoNameForm from '../components/cryptoNameForm'\nimport {Redirect} from 'react-router-dom'\nimport DetailedView from '../components/detailedView'\n\nconst URL = \"http://localhost:3000/api/v1/searchbyname\"\n\nexport default class Dashboard extends Component {\n\n  constructor(props){\n    super(props)\n      this.state = {\n        cryptos: [],\n        lookingAtSingleCrypto: false,\n        currentCrypto: {},\n        cryptosAreLoading: false\n      }\n    }\n\n  getCryptosName = () => {\n    this.setLoading()\n    fetch(URL)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          cryptos: data,\n          cryptosAreLoading: false\n        })\n      })\n  }\n\n  // componentDidMount(){\n  //   fetch(URL)\n  //   .then(res => res.json())\n  //   .then(data => {\n  //     console.log(data)\n  //   })\n  // }\n\n\n\n  // getCryptosIngredient = (event) => {\n  //   this.setLoading()\n  //   let searchedCrypto = event.target.elements['searchTerm'].value\n  //   fetch(ingredientURL + searchedCrypto)\n  //     .then(res => res.json())\n  //     .then(data => {\n  //       if(data.length === 0){\n  //         this.props.setFeedback(\"No cryptos found matching the given criteria\")\n  //       }\n  //       this.setState({\n  //         cryptos: data,\n  //         cryptosAreLoading: false\n  //       })\n  //     })\n  // }\n\n  setCurrentCrypto = (crypto) => {\n    this.setState({\n      currentCrypto: crypto,\n      lookingAtSingleCrypto: true\n    })\n\n  }\n\n  setLoading(){\n    this.setState({CryptosAreLoading: true})\n  }\n\n  returnMainMenu = () => {\n\n    this.setState({\n      currentCrypto: null,\n      lookingAtSingleCrypto: false\n    })\n  }\n\n\n  addCrypto = (crypto) => {\n    fetch(\"http://localhost:3000/api/v1/add_crypto\", {\n      method: 'POST',\n      body: JSON.stringify({crypto_id: crypto.id}),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.token\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.props.setFeedback(`Added ${crypto.name} to \"My Cryptos\"`)\n    })\n    console.log(crypto)\n  }\n\n\n\n\n  renderCryptos() {\n    if(this.state.cryptos.length === 0 && !this.state.cryptosAreLoading){\n      return null\n    } else if (!this.state.cryptosAreLoading){\n      return  <div className=\"cryptosContainer\">\n        <h2 className=\"card-title\">Found Cryptos</h2>\n        <CryptosContainer cryptos={this.state.cryptos}\n                                    setCurrentCrypto={this.setCurrentCrypto}/>\n      </div>\n\n    } else {\n        return <div className=\"cryptosContainer\">\n          <div className=\"loading-dimmer ui segment\">\n            <div className=\"ui active dimmer\">\n              <div className=\"ui text loader\">Finding Cryptos...</div>\n            </div>\n          </div>\n        </div>\n    }\n\n\n  }\n\n\n  renderDetailedUserCryptoView = () => {\n    const {currentCrypto} = this.state\n    if(this.state.lookingAtSingleCrypto === true) {\n      return <DetailedView\n              currentCrypto={currentCrypto}\n              returnMainMenu={this.returnMainMenu}\n              addCrypto={this.addCrypto}\n              />\n    } else {\n      return <div className=\"App\">\n            {this.renderCryptos()}\n          <h1 className=\"title\">My Crypto</h1>\n          <div className=\"forms\">\n            <CryptoNameForm getCryptosName={this.getCryptosName}/>\n\n          <br/>\n          </div>\n        </div>\n    }\n  }\n\n  render(){\n    if(!localStorage.token){\n      return <Redirect to=\"/login\" />\n    }\n\n    return (\n      <div>\n\n        {this.renderDetailedUserCryptoView()}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}