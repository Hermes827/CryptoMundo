{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/cryptosContainer.js\";\nimport React from 'react';\nimport Crypto from '../components/crypto';\nimport CryptoDetailedView from '../components/CryptoDetailedView';\n\nclass CryptosContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setCurrentCrypto = crypto => {\n      this.setState({\n        currentCrypto: crypto,\n        lookingAtSingleCrypto: true\n      });\n    };\n\n    this.returnToCryptosContainer = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false\n      });\n    };\n\n    this.addCrypto = crypto => {\n      fetch(\"http://localhost:3000/api/v1/add_crypto\", {\n        method: 'POST',\n        body: JSON.stringify({\n          crypto_id: crypto.id\n        }),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + localStorage.token\n        }\n      }).then(res => res.json()).then(data => {\n        this.setFeedback(\"Added \".concat(crypto.name, \" to portfolio\"));\n      });\n    };\n\n    this.returnToHomepageFromCryptosContainers = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false,\n        cryptoContainerIsOpen: false\n      });\n    };\n\n    this.state = {\n      cryptos: [],\n      lookingAtSingleCrypto: false,\n      cryptoContainerIsOpen: false,\n      currentCrypto: {},\n      feedback: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/api/v1/searchbyname\").then(res => res.json()).then(data => {\n      this.setState({\n        cryptos: data\n      });\n      console.log(data);\n    });\n  }\n\n  setFeedback(str) {\n    this.setState({\n      feedback: str\n    });\n    setTimeout(() => this.setState({\n      feedback: \"\"\n    }), 1500);\n  }\n\n  renderDetailedUserCryptoView() {\n    const _this$state = this.state,\n          currentCrypto = _this$state.currentCrypto,\n          lookingAtSingleCrypto = _this$state.lookingAtSingleCrypto;\n\n    if (lookingAtSingleCrypto === true) {\n      return React.createElement(CryptoDetailedView, {\n        feedback: this.state.feedback,\n        currentCrypto: currentCrypto,\n        returnToCryptosContainer: this.returnToCryptosContainer,\n        addCrypto: this.addCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"cryptoItem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"ccHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"All Cryptocurrencies\"), React.createElement(\"button\", {\n      className: \"CCbutton\",\n      onClick: this.props.returnToHomepageFromCryptosContainers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Return to homepage\"), this.renderDetailedUserCryptoView(), this.state.cryptos.map(crypto => {\n      return React.createElement(Crypto, {\n        className: \"cryptoElement\",\n        key: \"display-\" + crypto.name + \"-\" + crypto.id,\n        crypto: crypto,\n        setCurrentCrypto: this.setCurrentCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nexport default CryptosContainer;","map":{"version":3,"sources":["/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/cryptosContainer.js"],"names":["React","Crypto","CryptoDetailedView","CryptosContainer","Component","constructor","props","setCurrentCrypto","crypto","setState","currentCrypto","lookingAtSingleCrypto","returnToCryptosContainer","addCrypto","fetch","method","body","JSON","stringify","crypto_id","id","headers","localStorage","token","then","res","json","data","setFeedback","name","returnToHomepageFromCryptosContainers","cryptoContainerIsOpen","state","cryptos","feedback","componentDidMount","console","log","str","setTimeout","renderDetailedUserCryptoView","render","map"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Crypto from '../components/crypto'\nimport CryptoDetailedView from '../components/CryptoDetailedView'\n\n\n\nclass CryptosContainer extends React.Component {\n\n  constructor(props){\n    super(props)\n      this.state = {\n        cryptos: [],\n        lookingAtSingleCrypto: false,\n        cryptoContainerIsOpen: false,\n        currentCrypto: {},\n        feedback: \"\"\n      }\n    }\n\n\n  componentDidMount(){\n    fetch(\"http://localhost:3000/api/v1/searchbyname\")\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          cryptos: data\n          })\n          console.log(data)\n      })\n  }\n\n  setFeedback(str){\n    this.setState({\n      feedback: str\n    })\n    setTimeout(() => this.setState({feedback: \"\"}), 1500)\n  }\n\n  setCurrentCrypto = (crypto) => {\n    this.setState({\n      currentCrypto: crypto,\n      lookingAtSingleCrypto: true\n    })\n  }\n\n  renderDetailedUserCryptoView(){\n    const {currentCrypto, lookingAtSingleCrypto} = this.state\n    if(lookingAtSingleCrypto === true) {\n      return <CryptoDetailedView\n              feedback={this.state.feedback}\n              currentCrypto={currentCrypto}\n              returnToCryptosContainer={this.returnToCryptosContainer}\n              addCrypto={this.addCrypto}\n              />\n    }\n  }\n\n  returnToCryptosContainer = () => {\n    this.setState({\n      currentCrypto: null,\n      lookingAtSingleCrypto: false\n    })\n  }\n\n  addCrypto = (crypto) => {\n    fetch(\"http://localhost:3000/api/v1/add_crypto\", {\n      method: 'POST',\n      body: JSON.stringify({crypto_id: crypto.id}),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.token\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setFeedback(`Added ${crypto.name} to portfolio`)\n    })\n  }\n\nreturnToHomepageFromCryptosContainers = () => {\n  this.setState({\n    currentCrypto: null,\n    lookingAtSingleCrypto: false,\n    cryptoContainerIsOpen: false\n  })\n}\n\n  render(){\n    return(\n      <div className=\"cryptoItem\">\n        <h1 className=\"ccHeader\">All Cryptocurrencies</h1>\n        <button className=\"CCbutton\" onClick={this.props.returnToHomepageFromCryptosContainers}>Return to homepage</button>\n            {this.renderDetailedUserCryptoView()}\n        {\n        this.state.cryptos.map((crypto)=>{\n          return <Crypto\n                  className=\"cryptoElement\"\n                  key={\"display-\"+crypto.name+\"-\"+crypto.id}\n                  crypto={crypto}\n                  setCurrentCrypto={this.setCurrentCrypto}\n                  />\n\n        })\n      }\n    </div>\n    )\n  }\n\n}\n\nexport default CryptosContainer\n"]},"metadata":{},"sourceType":"module"}