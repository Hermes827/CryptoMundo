{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/UserCryptosContainer.js\";\nimport React from 'react';\nimport UserCrypto from '../components/UserCrypto';\nimport { withRouter } from 'react-router';\nimport UserCryptoDetailedView from './components/UserCryptoDetailedView';\n\nclass UserCryptosContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.displayUserCryptos = () => {\n      if (!localStorage.token) {\n        return;\n      }\n\n      fetch(\"http://localhost:3000/api/v1/profile\", {\n        method: \"GET\",\n        headers: {\n          'Authorization': \"Bearer \" + localStorage.token\n        }\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          userCryptos: data.user.cryptos // cryptosAreLoading: false\n\n        });\n      });\n    };\n\n    this.setCurrentCrypto = crypto => {\n      this.setState({\n        currentCrypto: crypto,\n        lookingAtSingleCrypto: true\n      });\n      this.props.history.push('/my-crypto/' + crypto.id);\n    };\n\n    this.renderDetailedUserCryptoView = () => {\n      const _this$state = this.state,\n            currentCrypto = _this$state.currentCrypto,\n            lookingAtSingleCrypto = _this$state.lookingAtSingleCrypto;\n\n      if (lookingAtSingleCrypto === true) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, React.createElement(UserCryptoDetailedView, {\n          countCrypto: this.countCrypto,\n          currentCrypto: currentCrypto,\n          returnToUserCryptosContainer: this.returnToUserCryptosContainer,\n          deleteCrypto: this.deleteCrypto,\n          error: this.state.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }));\n      }\n    };\n\n    this.returnToUserCryptosContainer = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false\n      });\n    };\n\n    this.returnToHomepageFromCryptosContainers = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false\n      });\n      this.props.history.push('/centerConsole');\n    };\n\n    this.deleteCrypto = crypto => {\n      fetch(\"http://localhost:3000/api/v1/remove_crypto/\" + crypto.id, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': \"Bearer \" + localStorage.token\n        },\n        body: JSON.stringify({\n          crypto_id: crypto.id\n        })\n      }).then(res => res.json()).then(data => {\n        let cryptoNames = data.user.cryptos.map(crypto => {\n          return crypto.name;\n        });\n\n        if (!cryptoNames.includes(crypto.name)) {\n          setTimeout(() => this.setState({\n            currentCrypto: null,\n            lookingAtSingleCrypto: false\n          }), 2000);\n        }\n\n        this.setError(\"Deleted ${crypto.name} from Cryptos\");\n        this.displayUserCryptos();\n      });\n    };\n\n    this.getPrices = () => {\n      const values = [];\n      this.props.userCryptos.map(crypto => {\n        values.push(parseInt(crypto.price));\n      });\n\n      if (values.length >= 1) {\n        let total = values.reduce((x, y) => x + y);\n        return total;\n      }\n\n      let total = 0;\n      return total;\n    };\n\n    this.countCrypto = cc => {\n      const cryptos = [];\n      this.props.userCryptos.map(crypto => {\n        if (cc.name === crypto.name) {\n          cryptos.push(crypto);\n        }\n      });\n      return cryptos.length;\n    };\n\n    this.distinctCrypto = () => {\n      const array = this.props.userCryptos;\n      const result = [];\n      const map = new Map();\n\n      for (const item of array) {\n        if (!map.has(item.id)) {\n          map.set(item.id, true); // set any value to Map\n\n          result.push({\n            id: item.id,\n            name: item.name,\n            image: item.image,\n            highday: item.highday,\n            lowday: item.lowday,\n            market: item.market,\n            price: item.price,\n            supply: item.supply,\n            volume: item.volume\n          });\n        }\n      }\n\n      return result;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"userCryptos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"ccHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"My Cryptocurrencies\"), React.createElement(\"h1\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Total portfolio value: $\", this.getPrices()), React.createElement(\"button\", {\n      className: \"CCbutton\",\n      onClick: this.props.returnToHomepageFromCryptosContainers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Return to homepage\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.distinctCrypto().map(crypto => {\n      return React.createElement(UserCrypto, {\n        countCrypto: this.countCrypto,\n        key: \"user-\" + crypto.name + \"-\" + crypto.id,\n        crypto: crypto,\n        setCurrentCrypto: this.props.setCurrentCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nexport default withRouter(UserCryptosContainer);","map":{"version":3,"sources":["/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/containers/UserCryptosContainer.js"],"names":["React","UserCrypto","withRouter","UserCryptoDetailedView","UserCryptosContainer","Component","displayUserCryptos","localStorage","token","fetch","method","headers","then","res","json","data","setState","userCryptos","user","cryptos","setCurrentCrypto","crypto","currentCrypto","lookingAtSingleCrypto","props","history","push","id","renderDetailedUserCryptoView","state","countCrypto","returnToUserCryptosContainer","deleteCrypto","error","returnToHomepageFromCryptosContainers","body","JSON","stringify","crypto_id","cryptoNames","map","name","includes","setTimeout","setError","getPrices","values","parseInt","price","length","total","reduce","x","y","cc","distinctCrypto","array","result","Map","item","has","set","image","highday","lowday","market","supply","volume","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport UserCrypto from '../components/UserCrypto'\nimport {withRouter} from 'react-router';\nimport UserCryptoDetailedView from './components/UserCryptoDetailedView'\n\nclass UserCryptosContainer extends React.Component {\n\n  displayUserCryptos = () => {\n    if(!localStorage.token){return}\n    fetch(\"http://localhost:3000/api/v1/profile\", {\n      method: \"GET\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token,\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        userCryptos: data.user.cryptos\n        // cryptosAreLoading: false\n      })\n    })\n  }\n\n  setCurrentCrypto = (crypto) => {\n    this.setState({\n      currentCrypto: crypto,\n      lookingAtSingleCrypto: true\n    })\n    this.props.history.push('/my-crypto/' + crypto.id)\n  }\n\n  renderDetailedUserCryptoView = () => {\n    const {currentCrypto, lookingAtSingleCrypto} = this.state\n    if(lookingAtSingleCrypto === true) {\n      return(\n        <div>\n        <UserCryptoDetailedView\n        countCrypto={this.countCrypto}\n        currentCrypto={currentCrypto}\n        returnToUserCryptosContainer={this.returnToUserCryptosContainer}\n        deleteCrypto={this.deleteCrypto}\n        error={this.state.error}\n        />\n        </div>\n          )\n    }\n  }\n\n  returnToUserCryptosContainer = () => {\n    this.setState({\n      currentCrypto: null,\n      lookingAtSingleCrypto: false,\n    })\n  }\n\n  returnToHomepageFromCryptosContainers = () => {\n    this.setState({\n      currentCrypto: null,\n      lookingAtSingleCrypto: false\n    })\n    this.props.history.push('/centerConsole')\n  }\n\n\n  deleteCrypto = (crypto) => {\n    fetch(\"http://localhost:3000/api/v1/remove_crypto/\"+ crypto.id, {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token\n      },\n      body: JSON.stringify({crypto_id: crypto.id})\n    })\n    .then(res => res.json())\n    .then(data => {\n      let cryptoNames = data.user.cryptos.map((crypto) => {\n        return crypto.name\n      })\n      if(!cryptoNames.includes(crypto.name)){\n        setTimeout(() => this.setState({\n          currentCrypto: null,\n          lookingAtSingleCrypto: false,\n        }), 2000)\n      }\n      this.setError(\"Deleted ${crypto.name} from Cryptos\")\n      this.displayUserCryptos()\n    })\n  }\n\ngetPrices = () => {\n  const values = []\n  this.props.userCryptos.map((crypto)=> {\n    values.push(parseInt(crypto.price))\n  })\n  if(values.length >= 1) {\n  let total = values.reduce((x, y) => x + y)\n  return total\n}\n  let total  = 0\n  return total\n}\n\ncountCrypto = (cc) => {\n  const cryptos = []\n  this.props.userCryptos.map((crypto) => {\n    if(cc.name === crypto.name) {\n      cryptos.push(crypto)\n    }\n  })\n  return cryptos.length\n}\n\ndistinctCrypto = () => {\nconst array = this.props.userCryptos\nconst result = [];\nconst map = new Map();\nfor (const item of array) {\n    if(!map.has(item.id)){\n        map.set(item.id, true);    // set any value to Map\n        result.push({\n            id: item.id,\n            name: item.name,\n            image: item.image,\n            highday: item.highday,\n            lowday: item.lowday,\n            market: item.market,\n            price: item.price,\n            supply: item.supply,\n            volume: item.volume\n        });\n    }\n}\nreturn result\n}\n\n  render(){\n    return(\n      <div className=\"userCryptos\">\n      <h1 className=\"ccHeader\">My Cryptocurrencies</h1>\n      <h1 className=\"\">Total portfolio value: ${this.getPrices()}</h1>\n      <button className=\"CCbutton\" onClick={this.props.returnToHomepageFromCryptosContainers}>Return to homepage</button>\n      <div>\n\n      {this.distinctCrypto().map((crypto)=>{\n        return <UserCrypto\n                countCrypto={this.countCrypto}\n                key={\"user-\"+crypto.name+\"-\"+crypto.id}\n                crypto={crypto}\n                setCurrentCrypto={this.props.setCurrentCrypto}\n                />\n      })}\n      </div>\n      </div>\n    )\n  }\n\n}\n\nexport default withRouter(UserCryptosContainer)\n"]},"metadata":{},"sourceType":"module"}