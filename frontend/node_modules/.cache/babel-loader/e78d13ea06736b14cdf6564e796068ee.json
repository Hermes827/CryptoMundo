{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/App.js\";\nimport React from 'react';\nimport Login from './components/login';\nimport Banner from './components/Banner';\nimport NewUserForm from './components/NewUserForm';\nimport { Route } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport centerConsole from './containers/centerConsole';\nimport EditUserContainer from './containers/EditUserContainer';\nimport './App.css';\nimport UserCryptosContainer from './containers/UserCryptosContainer';\nimport UserCryptoDetailedView from './components/UserCryptoDetailedView';\nimport NewsContainer from './containers/newsContainer';\nimport ArticleView from './components/articleView';\nimport { NEWS_API } from './constants';\nimport { USER_URL } from './constants';\nimport { LOGIN_URL } from './constants';\nimport { PROFILE } from './constants';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.displayUserCryptos = () => {\n      if (!localStorage.token) {\n        return;\n      }\n\n      fetch(\"http://localhost:3000/api/v1/profile\", {\n        method: \"GET\",\n        headers: {\n          'Authorization': \"Bearer \" + localStorage.token\n        }\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          userCryptos: data.user.cryptos,\n          // hasClickedMyCryptos: !this.state.hasClickedMyCryptos,\n          cryptosAreLoading: false\n        });\n      });\n    };\n\n    this.setCurrentCrypto = crypto => {\n      this.setState({\n        currentCrypto: crypto,\n        lookingAtSingleCrypto: true\n      });\n      this.props.history.push('/my-crypto/' + crypto.id);\n    };\n\n    this.setCurrentCrypto1 = crypto => {\n      this.setState({\n        currentCrypto: crypto,\n        lookingAtSingleCrypto: true\n      }); // this.props.history.push('/my-crypto/' + crypto.id)\n    };\n\n    this.countCrypto = cc => {\n      const cryptos = [];\n      this.state.userCryptos.map(crypto => {\n        if (cc.name === crypto.name) {\n          cryptos.push(crypto);\n          console.log(crypto);\n        }\n      });\n      return cryptos.length;\n    };\n\n    this.renderDetailedUserCryptoView = () => {\n      const _this$state = this.state,\n            userCryptos = _this$state.userCryptos,\n            currentCrypto = _this$state.currentCrypto,\n            lookingAtSingleCrypto = _this$state.lookingAtSingleCrypto;\n\n      if (lookingAtSingleCrypto === true) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, React.createElement(UserCryptoDetailedView, {\n          countCrypto: this.countCrypto,\n          currentCrypto: currentCrypto,\n          returnToUserCryptosContainer: this.returnToUserCryptosContainer,\n          deleteCrypto: this.deleteCrypto,\n          error: this.state.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }));\n      }\n    };\n\n    this.returnToUserCryptosContainer = () => {\n      this.setState({\n        currentCrypto: null,\n        lookingAtSingleCrypto: false // hasClickedMyCryptos: true\n\n      });\n    };\n\n    this.returnToHomepageFromCryptosContainers = () => {\n      this.setState({\n        // cryptosAreLoading: true,\n        currentCrypto: null,\n        lookingAtSingleCrypto: false // hasClickedMyCryptos: true\n\n      });\n      this.props.history.push('/centerConsole');\n    };\n\n    this.deleteCrypto = crypto => {\n      const cryptoId = crypto.id;\n      fetch(\"http://localhost:3000/api/v1/remove_crypto/\" + cryptoId, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': \"Bearer \" + localStorage.token\n        },\n        body: JSON.stringify({\n          crypto_id: cryptoId\n        })\n      }).then(res => res.json()).then(data => {\n        let cryptoNames = data.user.cryptos.map(crypto => {\n          return crypto.name;\n        }); // console.log(cryptoNames)\n        // console.log(data.user.cryptos)\n\n        if (!cryptoNames.includes(crypto.name)) {\n          setTimeout(() => this.setState({\n            currentCrypto: null,\n            lookingAtSingleCrypto: false\n          }), 2000);\n        }\n\n        this.setError(\"Deleted \".concat(crypto.name, \" from Cryptos\"));\n        this.displayUserCryptos();\n      });\n    };\n\n    this.getNews = () => {\n      fetch(NEWS_API).then(res => res.json()).then(data => {\n        this.setState({\n          news: data.articles\n        });\n      });\n    };\n\n    this.setCurrentNewsArticle = article => {\n      this.setState({\n        currentNewsArticle: article,\n        lookingAtSingleNewsArticle: true\n      });\n    };\n\n    this.renderDetailedNewsView = () => {\n      const _this$state2 = this.state,\n            currentNewsArticle = _this$state2.currentNewsArticle,\n            lookingAtSingleNewsArticle = _this$state2.lookingAtSingleNewsArticle;\n\n      if (lookingAtSingleNewsArticle === true) {\n        return React.createElement(ArticleView, {\n          currentNewsArticle: currentNewsArticle,\n          returnToNewsContainer: this.returnToNewsContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 347\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.returnToNewsContainer = () => {\n      this.setState({\n        currentNewsArticle: null,\n        lookingAtSingleNewsArticle: false\n      });\n    };\n\n    this.returnToHomepageFromNewsContainer = () => {\n      this.setState({\n        currentNewsArticle: null,\n        lookingAtSingleNewsArticle: false\n      });\n      this.props.history.push('/centerConsole');\n    };\n\n    this.renderEditUser = () => {\n      if (this.state.hasClickedSettings === true) {\n        return React.createElement(EditUserContainer, {\n          current_user: this.state.current_user,\n          updateUser: this.updateUser,\n          deleteUser: this.deleteUser,\n          setEdit: this.setEdit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.setEdit = () => {\n      console.log(\"hello\");\n      this.setState({\n        hasClickedSettings: !this.state.hasClickedSettings\n      });\n      this.props.history.push('/centerConsole');\n    };\n\n    this.state = {\n      current_user: {},\n      error: \"\",\n      feedback: \"\",\n      userCryptos: [],\n      // hasClickedMyCryptos: false,\n      currentCrypto: {},\n      lookingAtSingleCrypto: false,\n      cryptosAreLoading: false,\n      news: [],\n      currentNewsArticle: {},\n      lookingAtSingleNewsArticle: false,\n      hasClickedSettings: false\n    };\n    this.createNewUser = this.createNewUser.bind(this);\n    this.attemptLogin = this.attemptLogin.bind(this);\n    this.setActiveUser = this.setActiveUser.bind(this);\n    this.logout = this.logout.bind(this);\n    this.updateUser = this.updateUser.bind(this);\n    this.deleteUser = this.deleteUser.bind(this);\n    this.toggleMyCryptos = this.toggleMyCryptos.bind(this);\n    this.setError = this.setError.bind(this);\n    this.setFeedback = this.setFeedback.bind(this);\n    this.renewState();\n  }\n\n  setFeedback(str) {\n    this.setState({\n      feedback: str\n    });\n    setTimeout(() => this.setState({\n      feedback: \"\"\n    }), 1500);\n  }\n\n  setError(str) {\n    this.setState({\n      error: str\n    });\n    setTimeout(() => this.setState({\n      error: \"\"\n    }), 1500);\n  }\n\n  createNewUser(user) {\n    fetch(USER_URL, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(res => res.json()).then(data => {\n      this.setActiveUser(data);\n      this.props.history.push('/centerConsole');\n    });\n  }\n\n  attemptLogin(user) {\n    fetch(LOGIN_URL, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(res => res.json()).then(data => {\n      this.setActiveUser(data);\n\n      if (!data.message) {\n        this.props.history.push('/centerConsole');\n      }\n    });\n  }\n\n  setActiveUser(data, mode = \"hard\") {\n    if (data.message && mode === \"soft\") {\n      return;\n    } else if (data.message) {\n      this.setState({\n        error: data.message\n      });\n    } else {\n      this.setState({\n        current_user: data.user,\n        error: \"\"\n      });\n\n      if (data.jwt) {\n        localStorage.token = data.jwt;\n      }\n    }\n  }\n\n  logout() {\n    this.setState({\n      current_user: {},\n      // hasClickedMyCryptos: false,\n      currentCrypto: {},\n      lookingAtSingleCrypto: false\n    });\n    delete localStorage.token;\n    this.props.history.push('/login');\n  }\n\n  renewState() {\n    if (!localStorage.token) {\n      return;\n    }\n\n    fetch(\"http://localhost:3000/api/v1/profile\", {\n      method: \"GET\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token\n      }\n    }).then(res => res.json()).then(data => this.setActiveUser(data, \"soft\"));\n  } ///////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////\n\n\n  updateUser(user) {\n    fetch(USER_URL + \"/\".concat(user.id), {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + localStorage.token,\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(res => res.json()).then(data => {\n      this.setActiveUser(data);\n      this.props.history.push('/centerConsole');\n    });\n  }\n\n  deleteUser(id) {\n    fetch(USER_URL + \"/\".concat(id), {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token\n      }\n    }).then(() => this.logout());\n  } ////////////////////////////////////////////////////////////////////////////\n  // Usercrypto\n\n\n  toggleMyCryptos() {\n    this.setState({// hasClickedMyCryptos: !this.state.hasClickedMyCryptos\n    });\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/\",\n      render: () => React.createElement(Banner, {\n        current_user: this.state.current_user,\n        logout: this.logout,\n        displayUserCryptos: this.displayUserCryptos,\n        getNews: this.getNews,\n        setEdit: this.setEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/news\",\n      render: () => React.createElement(NewsContainer, {\n        returnToHomepageFromNewsContainer: this.returnToHomepageFromNewsContainer,\n        setCurrentNewsArticle: this.setCurrentNewsArticle,\n        news: this.state.news,\n        currentNewsArticle: this.state.currentNewsArticle,\n        lookingAtSingleNewsArticle: this.state.lookingAtSingleNewsArticle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), this.renderDetailedNewsView(), React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      render: () => React.createElement(Login, {\n        attemptLogin: this.attemptLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/user_signup\",\n      render: () => React.createElement(NewUserForm, {\n        createNewUser: this.createNewUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/my-crypto\",\n      render: () => React.createElement(UserCryptosContainer, {\n        returnToHomepageFromCryptosContainers: this.returnToHomepageFromCryptosContainers,\n        toggleCryptos: this.toggleMyCryptos,\n        userCryptos: this.state.userCryptos,\n        setCurrentCrypto: this.setCurrentCrypto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }), this.renderDetailedUserCryptoView(), React.createElement(Route, {\n      exact: true,\n      path: \"/centerConsole\",\n      render: () => React.createElement(centerConsole, {\n        setFeedback: this.setFeedback,\n        feedback: this.state.feedback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/update_profile\",\n      render: () => this.renderEditUser(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/chriscable/Desktop/projects/CryptoMundo/frontend/src/App.js"],"names":["React","Login","Banner","NewUserForm","Route","withRouter","centerConsole","EditUserContainer","UserCryptosContainer","UserCryptoDetailedView","NewsContainer","ArticleView","NEWS_API","USER_URL","LOGIN_URL","PROFILE","App","Component","constructor","props","displayUserCryptos","localStorage","token","fetch","method","headers","then","res","json","data","setState","userCryptos","user","cryptos","cryptosAreLoading","setCurrentCrypto","crypto","currentCrypto","lookingAtSingleCrypto","history","push","id","setCurrentCrypto1","countCrypto","cc","state","map","name","console","log","length","renderDetailedUserCryptoView","returnToUserCryptosContainer","deleteCrypto","error","returnToHomepageFromCryptosContainers","cryptoId","body","JSON","stringify","crypto_id","cryptoNames","includes","setTimeout","setError","getNews","news","articles","setCurrentNewsArticle","article","currentNewsArticle","lookingAtSingleNewsArticle","renderDetailedNewsView","returnToNewsContainer","returnToHomepageFromNewsContainer","renderEditUser","hasClickedSettings","current_user","updateUser","deleteUser","setEdit","feedback","createNewUser","bind","attemptLogin","setActiveUser","logout","toggleMyCryptos","setFeedback","renewState","str","message","mode","jwt","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Login from './components/login';\nimport Banner from './components/Banner'\nimport NewUserForm from './components/NewUserForm'\nimport { Route } from 'react-router-dom';\nimport {withRouter} from 'react-router';\nimport centerConsole from './containers/centerConsole'\nimport EditUserContainer from './containers/EditUserContainer'\nimport './App.css';\nimport UserCryptosContainer from './containers/UserCryptosContainer'\nimport UserCryptoDetailedView from './components/UserCryptoDetailedView'\nimport NewsContainer from './containers/newsContainer'\nimport ArticleView from './components/articleView'\nimport {NEWS_API} from './constants'\nimport {USER_URL} from './constants'\nimport {LOGIN_URL} from './constants'\nimport {PROFILE} from './constants'\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      current_user: {},\n      error: \"\",\n      feedback: \"\",\n      userCryptos: [],\n      // hasClickedMyCryptos: false,\n      currentCrypto: {},\n      lookingAtSingleCrypto: false,\n      cryptosAreLoading: false,\n      news: [],\n      currentNewsArticle: {},\n      lookingAtSingleNewsArticle: false,\n      hasClickedSettings: false\n    }\n\n    this.createNewUser = this.createNewUser.bind(this)\n    this.attemptLogin = this.attemptLogin.bind(this)\n    this.setActiveUser = this.setActiveUser.bind(this)\n    this.logout = this.logout.bind(this)\n    this.updateUser = this.updateUser.bind(this)\n    this.deleteUser = this.deleteUser.bind(this)\n    this.toggleMyCryptos = this.toggleMyCryptos.bind(this)\n    this.setError = this.setError.bind(this)\n    this.setFeedback = this.setFeedback.bind(this)\n\n\n    this.renewState();\n  }\n\n  setFeedback(str){\n    this.setState({\n      feedback: str\n    })\n    setTimeout(() => this.setState({feedback: \"\"}), 1500)\n  }\n\n  setError(str){\n    this.setState({\n      error: str\n    })\n    setTimeout(() => this.setState({error: \"\"}), 1500)\n  }\n\n  createNewUser(user){\n    fetch(USER_URL, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({user})\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setActiveUser(data)\n      this.props.history.push('/centerConsole')\n    })\n  }\n\n  attemptLogin(user){\n    fetch(LOGIN_URL, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({user})\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setActiveUser(data)\n      if(!data.message){\n        this.props.history.push('/centerConsole')\n      }\n    })\n  }\n\n  setActiveUser(data, mode=\"hard\"){\n    if(data.message && mode === \"soft\"){\n      return\n    } else if(data.message){\n      this.setState({error: data.message})\n    } else {\n      this.setState({\n        current_user: data.user,\n        error: \"\"\n      })\n      if(data.jwt){localStorage.token = data.jwt}\n    }\n  }\n\n  logout(){\n    this.setState({\n      current_user: {},\n      // hasClickedMyCryptos: false,\n      currentCrypto: {},\n      lookingAtSingleCrypto: false\n    })\n    delete localStorage.token\n    this.props.history.push('/login')\n  }\n\n  renewState(){\n  if(!localStorage.token){return}\n  fetch(\"http://localhost:3000/api/v1/profile\", {\n    method: \"GET\",\n    headers: {\n      'Authorization': \"Bearer \" + localStorage.token\n    }\n  })\n  .then(res => res.json())\n  .then(data => this.setActiveUser(data, \"soft\"))\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\n\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  updateUser(user){\n    fetch(USER_URL + `/${user.id}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + localStorage.token,\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setActiveUser(data)\n      this.props.history.push('/centerConsole')\n    })\n  }\n\n  deleteUser(id){\n    fetch(USER_URL + `/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token\n      }\n    })\n    .then( () => this.logout())\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n\n  // Usercrypto\n\n  displayUserCryptos = () => {\n    if(!localStorage.token){return}\n    fetch(\"http://localhost:3000/api/v1/profile\", {\n      method: \"GET\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token,\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        userCryptos: data.user.cryptos,\n        // hasClickedMyCryptos: !this.state.hasClickedMyCryptos,\n        cryptosAreLoading: false\n      })\n    })\n  }\n\n\n  toggleMyCryptos() {\n    this.setState({\n      // hasClickedMyCryptos: !this.state.hasClickedMyCryptos\n    })\n  }\n\n  setCurrentCrypto = (crypto) => {\n    this.setState({\n      currentCrypto: crypto,\n      lookingAtSingleCrypto: true\n    })\n    this.props.history.push('/my-crypto/' + crypto.id)\n\n  }\n\n  setCurrentCrypto1 = (crypto) => {\n    this.setState({\n      currentCrypto: crypto,\n      lookingAtSingleCrypto: true\n    })\n    // this.props.history.push('/my-crypto/' + crypto.id)\n\n  }\n\n  // renderUserCryptos = () => {\n  //   const {userCryptos} = this.state\n  //   if(this.state.hasClickedMyCryptos === true && !this.state.cryptosAreLoading) {\n  //     return <UserCryptosContainer\n  //             returnToHomepageFromCryptosContainers={this.returnToHomepageFromCryptosContainers}\n  //             toggleCryptos={this.toggleMyCryptos}\n  //             userCryptos={userCryptos}\n  //             setCurrentCrypto={this.setCurrentCrypto}\n  //             />\n  //   }\n  // }\n\n  countCrypto = (cc) => {\n    const cryptos = []\n    this.state.userCryptos.map((crypto) => {\n      if(cc.name === crypto.name) {\n        cryptos.push(crypto)\n        console.log(crypto)\n      }\n    })\n    return cryptos.length\n  }\n\n\n  renderDetailedUserCryptoView = () => {\n    const {userCryptos, currentCrypto, lookingAtSingleCrypto} = this.state\n    if(lookingAtSingleCrypto === true) {\n      return(\n        <div>\n              <UserCryptoDetailedView\n              countCrypto={this.countCrypto}\n              currentCrypto={currentCrypto}\n              returnToUserCryptosContainer={this.returnToUserCryptosContainer}\n              deleteCrypto={this.deleteCrypto}\n              error={this.state.error}\n              />\n        </div>\n          )\n    }\n  }\n\n  // <UserCryptosContainer\n  // returnToHomepageFromCryptosContainers={this.returnToHomepageFromCryptosContainers}\n  // toggleCryptos={this.toggleMyCryptos}\n  // userCryptos={userCryptos}\n  // setCurrentCrypto={this.setCurrentCrypto}\n  // />\n\n  returnToUserCryptosContainer = () => {\n    this.setState({\n      currentCrypto: null,\n      lookingAtSingleCrypto: false,\n      // hasClickedMyCryptos: true\n    })\n  }\n\n  // returnMainMenu = () => {\n  //   this.setState({\n  //     // hasClickedMyCryptos: false,\n  //     lookingAtSingleCrypto: false\n  //   })\n  //   this.props.history.push('/centerConsole')\n  // }\n\n  returnToHomepageFromCryptosContainers = () => {\n    this.setState({\n      // cryptosAreLoading: true,\n      currentCrypto: null,\n      lookingAtSingleCrypto: false,\n      // hasClickedMyCryptos: true\n    })\n    this.props.history.push('/centerConsole')\n\n  }\n\n\n  deleteCrypto = (crypto) => {\n    const cryptoId = crypto.id\n    fetch(\"http://localhost:3000/api/v1/remove_crypto/\"+ cryptoId, {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': \"Bearer \" + localStorage.token\n      },\n      body: JSON.stringify({crypto_id: cryptoId})\n    })\n    .then(res => res.json())\n    .then(data => {\n      let cryptoNames = data.user.cryptos.map((crypto) => {\n        return crypto.name\n      })\n      // console.log(cryptoNames)\n      // console.log(data.user.cryptos)\n      if(!cryptoNames.includes(crypto.name)){\n        setTimeout(() => this.setState({\n          currentCrypto: null,\n          lookingAtSingleCrypto: false,\n        }), 2000)\n      }\n\n\n      this.setError(`Deleted ${crypto.name} from Cryptos`)\n      this.displayUserCryptos()\n    })\n\n  }\n\n//  news\n\ngetNews = () => {\n  fetch(NEWS_API)\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        news: data.articles\n      })\n    })\n}\n\nsetCurrentNewsArticle = (article) => {\n  this.setState({\n    currentNewsArticle: article,\n    lookingAtSingleNewsArticle: true\n  })\n}\n\nrenderDetailedNewsView = () => {\nconst {currentNewsArticle, lookingAtSingleNewsArticle} = this.state\nif(lookingAtSingleNewsArticle === true) {\n    return (\n          <ArticleView\n          currentNewsArticle={currentNewsArticle}\n          returnToNewsContainer={this.returnToNewsContainer}\n          />\n        )\n  }\n}\n\nreturnToNewsContainer = () => {\n  this.setState({\n    currentNewsArticle: null,\n    lookingAtSingleNewsArticle: false\n  })\n}\n\nreturnToHomepageFromNewsContainer = () => {\n  this.setState({\n    currentNewsArticle: null,\n    lookingAtSingleNewsArticle: false\n  })\n  this.props.history.push('/centerConsole')\n}\n///////////////////////////////////////////////////////////////////////////////\n\nrenderEditUser = () => {\nif(this.state.hasClickedSettings === true) {\n  return <EditUserContainer\n            current_user={this.state.current_user}\n            updateUser={this.updateUser}\n            deleteUser={this.deleteUser}\n            setEdit={this.setEdit}\n          />\n}\n}\n\nsetEdit = () => {\n  console.log(\"hello\")\n  this.setState({\n    hasClickedSettings: !this.state.hasClickedSettings\n  })\n  this.props.history.push('/centerConsole')\n\n}\n\n/////////////////////////////////////////////////////////////////////////////////\n\n  render(){\n\n    return (\n      <div className=\"App\">\n        <Route path='/' render={() => <Banner\n                                          current_user={this.state.current_user}\n                                          logout={this.logout}\n                                          displayUserCryptos={this.displayUserCryptos}\n                                          getNews={this.getNews}\n                                          setEdit={this.setEdit}\n                                      />}/>\n\n          <Route exact path=\"/news\" render={() => <NewsContainer\n                                                      returnToHomepageFromNewsContainer={this.returnToHomepageFromNewsContainer}\n                                                      setCurrentNewsArticle={this.setCurrentNewsArticle}\n                                                      news={this.state.news}\n                                                      currentNewsArticle={this.state.currentNewsArticle}\n                                                      lookingAtSingleNewsArticle={this.state.lookingAtSingleNewsArticle}\n                                                  />}/>\n                                                {this.renderDetailedNewsView()}\n          <Route exact path=\"/login\" render={() => <Login attemptLogin={this.attemptLogin}/>}/>\n          <Route exact path=\"/user_signup\" render={() => <NewUserForm createNewUser={this.createNewUser}/>}/>\n          <Route path='/my-crypto' render={() => <UserCryptosContainer\n                                                      returnToHomepageFromCryptosContainers={this.returnToHomepageFromCryptosContainers}\n                                                      toggleCryptos={this.toggleMyCryptos}\n                                                      userCryptos={this.state.userCryptos}\n                                                      setCurrentCrypto={this.setCurrentCrypto}\n                                                      />}/>\n                                                      {this.renderDetailedUserCryptoView()}\n          <Route exact path=\"/centerConsole\" render={() =>  <centerConsole\n                                                         setFeedback={this.setFeedback}\n                                                         feedback={this.state.feedback}\n                                                         />}\n                                                         />\n                                                       <Route exact path=\"/update_profile\" render={() => this.renderEditUser()}/>\n\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}